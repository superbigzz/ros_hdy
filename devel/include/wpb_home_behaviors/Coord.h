// Generated by gencpp from file wpb_home_behaviors/Coord.msg
// DO NOT EDIT!


#ifndef WPB_HOME_BEHAVIORS_MESSAGE_COORD_H
#define WPB_HOME_BEHAVIORS_MESSAGE_COORD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wpb_home_behaviors
{
template <class ContainerAllocator>
struct Coord_
{
  typedef Coord_<ContainerAllocator> Type;

  Coord_()
    : name()
    , x()
    , y()
    , z()
    , probability()  {
    }
  Coord_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , x(_alloc)
    , y(_alloc)
    , z(_alloc)
    , probability(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  _name_type name;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x_type;
  _x_type x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _y_type;
  _y_type y;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _z_type;
  _z_type z;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _probability_type;
  _probability_type probability;





  typedef boost::shared_ptr< ::wpb_home_behaviors::Coord_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wpb_home_behaviors::Coord_<ContainerAllocator> const> ConstPtr;

}; // struct Coord_

typedef ::wpb_home_behaviors::Coord_<std::allocator<void> > Coord;

typedef boost::shared_ptr< ::wpb_home_behaviors::Coord > CoordPtr;
typedef boost::shared_ptr< ::wpb_home_behaviors::Coord const> CoordConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wpb_home_behaviors::Coord_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wpb_home_behaviors::Coord_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace wpb_home_behaviors

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'wpb_home_behaviors': ['/home/hdy/catkin_ws/src/wpb_home/wpb_home_behaviors/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::wpb_home_behaviors::Coord_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wpb_home_behaviors::Coord_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wpb_home_behaviors::Coord_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wpb_home_behaviors::Coord_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wpb_home_behaviors::Coord_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wpb_home_behaviors::Coord_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wpb_home_behaviors::Coord_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4c6bf06051abcb9913c14ef2b4e56f0";
  }

  static const char* value(const ::wpb_home_behaviors::Coord_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4c6bf06051abcb9ULL;
  static const uint64_t static_value2 = 0x913c14ef2b4e56f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::wpb_home_behaviors::Coord_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wpb_home_behaviors/Coord";
  }

  static const char* value(const ::wpb_home_behaviors::Coord_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wpb_home_behaviors::Coord_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] name\n\
float64[] x\n\
float64[] y\n\
float64[] z\n\
float64[] probability\n\
";
  }

  static const char* value(const ::wpb_home_behaviors::Coord_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wpb_home_behaviors::Coord_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.probability);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Coord_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wpb_home_behaviors::Coord_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wpb_home_behaviors::Coord_<ContainerAllocator>& v)
  {
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "z[]" << std::endl;
    for (size_t i = 0; i < v.z.size(); ++i)
    {
      s << indent << "  z[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.z[i]);
    }
    s << indent << "probability[]" << std::endl;
    for (size_t i = 0; i < v.probability.size(); ++i)
    {
      s << indent << "  probability[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.probability[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WPB_HOME_BEHAVIORS_MESSAGE_COORD_H
