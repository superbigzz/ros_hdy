# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from visp_tracker/MovingEdgeSettings.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MovingEdgeSettings(genpy.Message):
  _md5sum = "4e8f98b7dec6ffa099529044b3472486"
  _type = "visp_tracker/MovingEdgeSettings"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This message contains tracking parameters.
#
# These parameters determine how precise, how fast and how
# reliable will be the tracking.
#
# It should be tuned carefully and can be changed dynamically.
#
# For more details, see the ViSP documentation:
# http://www.irisa.fr/lagadic/visp/publication.html


# Moving edge parameters.

int64 mask_size    # Mask size (in pixel) used to compute the image gradient
                   # and determine the object contour.
		   # A larger mask size is better for larger images.
		   # 3 pixels is enough for 640x480 images.
                   # Increasing this value makes the tracking slower.
		   #
		   # Caution: this value cannot be changed dynamically
		   # without resetting the tracking.

int64 range        # Maximum seek distance on both sides of the reference pixel.
      		   # It should match the maximum distance in pixel between
		   # the current position of the feature projection and
		   # its next position.
		   # I.e. if the object moves fast and your tracking
		   # frequency is low, this value should be increased.
                   # Increasing this value makes the tracking slower.

float64 threshold  # Value used to determine if a moving edge is valid
		   # or not.

float64 mu1        # Minimum image contrast allowed to detect a contour.
float64 mu2        # Maximum image contrast allowed to detect a contour.

int64 sample_step   # Minimum distance in pixel between two
      		    # discretization points.
      		    # It avoids having too many discretization points when
		    # the tracked object is far away (and its projection
		    # in the image is small).
		    # Increasing this value makes the tracking *faster*.

int64 strip             # How many pixels are ignored around the borders.


# Tracker parameters.

float64 first_threshold # What proportion of points should be valid to
                        # acccept an initial pose.
			# Value should be between 0 et 1.

"""
  __slots__ = ['mask_size','range','threshold','mu1','mu2','sample_step','strip','first_threshold']
  _slot_types = ['int64','int64','float64','float64','float64','int64','int64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mask_size,range,threshold,mu1,mu2,sample_step,strip,first_threshold

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MovingEdgeSettings, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mask_size is None:
        self.mask_size = 0
      if self.range is None:
        self.range = 0
      if self.threshold is None:
        self.threshold = 0.
      if self.mu1 is None:
        self.mu1 = 0.
      if self.mu2 is None:
        self.mu2 = 0.
      if self.sample_step is None:
        self.sample_step = 0
      if self.strip is None:
        self.strip = 0
      if self.first_threshold is None:
        self.first_threshold = 0.
    else:
      self.mask_size = 0
      self.range = 0
      self.threshold = 0.
      self.mu1 = 0.
      self.mu2 = 0.
      self.sample_step = 0
      self.strip = 0
      self.first_threshold = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2q3d2qd().pack(_x.mask_size, _x.range, _x.threshold, _x.mu1, _x.mu2, _x.sample_step, _x.strip, _x.first_threshold))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.mask_size, _x.range, _x.threshold, _x.mu1, _x.mu2, _x.sample_step, _x.strip, _x.first_threshold,) = _get_struct_2q3d2qd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2q3d2qd().pack(_x.mask_size, _x.range, _x.threshold, _x.mu1, _x.mu2, _x.sample_step, _x.strip, _x.first_threshold))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.mask_size, _x.range, _x.threshold, _x.mu1, _x.mu2, _x.sample_step, _x.strip, _x.first_threshold,) = _get_struct_2q3d2qd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2q3d2qd = None
def _get_struct_2q3d2qd():
    global _struct_2q3d2qd
    if _struct_2q3d2qd is None:
        _struct_2q3d2qd = struct.Struct("<2q3d2qd")
    return _struct_2q3d2qd
