# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from visp_tracker/KltSettings.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class KltSettings(genpy.Message):
  _md5sum = "7cd8ae2f3a31d26015e8c80e88eb027a"
  _type = "visp_tracker/KltSettings"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This message contains tracking parameters.
#
# These parameters determine how precise, how fast and how
# reliable will be the tracking.
#
# It should be tuned carefully and can be changed dynamically.
#
# For more details, see the ViSP documentation:
# http://www.irisa.fr/lagadic/visp/publication.html

# Klt Parameters.

int64 max_features      # Maximum number of features
int64 window_size       # Window size
float64 quality         # Quality of the tracker
float64 min_distance      # Minimum distance betwenn two points
float64 harris          # Harris free parameters
int64 size_block        # Block size
int64 pyramid_lvl       # Pyramid levels
int64 mask_border       # Mask Border

"""
  __slots__ = ['max_features','window_size','quality','min_distance','harris','size_block','pyramid_lvl','mask_border']
  _slot_types = ['int64','int64','float64','float64','float64','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       max_features,window_size,quality,min_distance,harris,size_block,pyramid_lvl,mask_border

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(KltSettings, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.max_features is None:
        self.max_features = 0
      if self.window_size is None:
        self.window_size = 0
      if self.quality is None:
        self.quality = 0.
      if self.min_distance is None:
        self.min_distance = 0.
      if self.harris is None:
        self.harris = 0.
      if self.size_block is None:
        self.size_block = 0
      if self.pyramid_lvl is None:
        self.pyramid_lvl = 0
      if self.mask_border is None:
        self.mask_border = 0
    else:
      self.max_features = 0
      self.window_size = 0
      self.quality = 0.
      self.min_distance = 0.
      self.harris = 0.
      self.size_block = 0
      self.pyramid_lvl = 0
      self.mask_border = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2q3d3q().pack(_x.max_features, _x.window_size, _x.quality, _x.min_distance, _x.harris, _x.size_block, _x.pyramid_lvl, _x.mask_border))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.max_features, _x.window_size, _x.quality, _x.min_distance, _x.harris, _x.size_block, _x.pyramid_lvl, _x.mask_border,) = _get_struct_2q3d3q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2q3d3q().pack(_x.max_features, _x.window_size, _x.quality, _x.min_distance, _x.harris, _x.size_block, _x.pyramid_lvl, _x.mask_border))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.max_features, _x.window_size, _x.quality, _x.min_distance, _x.harris, _x.size_block, _x.pyramid_lvl, _x.mask_border,) = _get_struct_2q3d3q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2q3d3q = None
def _get_struct_2q3d3q():
    global _struct_2q3d3q
    if _struct_2q3d3q is None:
        _struct_2q3d3q = struct.Struct("<2q3d3q")
    return _struct_2q3d3q
